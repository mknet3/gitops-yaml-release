name: GitOps YAML Release

inputs:
  target_repository:
    description: 'Target repository name'
    required: true
    type: string
  target_property:
    description: 'Target property to update'
    required: true
    type: string
  target_branch:
    description: 'Target branch'
    required: false
    default: 'main'
  value:
    description: 'Value to set'
    required: true
    type: string
  file_path:
    description: 'File path to update'
    required: true
    type: string
  commit_message:
    description: 'Commit message'
    required: false
    type: string
  gh_token:
    description: 'GitHub token'
    required: true
    type: string

runs:
  using: "composite"
  steps:
  - name: Setup Python
    uses: actions/setup-python@v2
    with:
      python-version: '3.12.1'

  - name: Install yq
    shell: bash
    run: pip install yq==3.2.3

  - name: Clone Target Repository
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    shell: bash
    run: |
      gh repo clone ${{ github.repository_owner }}/${{ inputs.target_repository }}

  - name: Set foobar to cool
    uses: mikefarah/yq@master
    with:
      cmd: yq -i '.${{ inputs.target_property }} = ${{ inputs.value }}' './${{ inputs.target_repository }}/${{ inputs.file_path }}'

  - name: Commit and Push Changes
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.gh_token }}
    run: |
      cd ./${{ inputs.target_repository }}
      git config --global user.name 'github-actions[bot]'
      git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      git add ./${{ inputs.file_path }}
      commit_message=${{ inputs.commit_message }}
      if [ -z "$commit_message" ]; then
          COMMIT_MESSAGE="feat: update ${{ inputs.target_property }} to ${{ inputs.value }}"
      fi
      
      # Retry logic
      MAX_RETRIES=3
      RETRY_COUNT=0
      SUCCESS=0
      
      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          git fetch origin ${{ inputs.target_branch }}
          git reset --soft FETCH_HEAD
          git commit -m "$COMMIT_MESSAGE" --allow-empty
          # Attempt to rebase your changes on top of the latest changes from remote
          if git rebase origin/${{ inputs.target_branch }}; then
              # Push if rebase was successful
              if git push https://x-access-token:$GH_TOKEN@github.com/${{ github.repository_owner }}/${{ inputs.target_repository }}.git HEAD:${{ inputs.target_branch }}; then
                  exit 0
              fi
          fi
          RETRY_COUNT=$((RETRY_COUNT+1))
          echo "Attempt $RETRY_COUNT of $MAX_RETRIES failed. Retrying in 5 seconds..."
          sleep 5
      done
      
      echo "Operation failed after $MAX_RETRIES attempts."
      exit 1
